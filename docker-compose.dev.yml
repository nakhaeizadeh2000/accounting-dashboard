version: "3.8"

services:
  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS (if needed)
    volumes:
      - ./:/app
      - ./nginx/default.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro # SSL certificates (optional for dev)
    depends_on:
      - api
      - client
    networks:
      isatis:
        ipv4_address: "172.20.0.10"

  api:
    container_name: api
    build:
      context: .
      dockerfile: dev-env/api.dev.dockerfile
      args:
        NODE_ENV: development # Set environment to development
    env_file:
      - .env
    volumes:
      - .:/home/app
      - /home/app/api/node_modules
    ports:
      - "9229:9229"
    networks:
      isatis:
        ipv4_address: "172.20.0.20"
    depends_on:
      - postgres
      - redis
      - minio1
    links:
      - postgres
      - redis

  minio1:
    image: minio/minio:RELEASE.2024-11-07T00-52-20Z.fips
    hostname: minio
    command: server --console-address ":9001" /data
    # restart: unless-stopped
    container_name: minio
    env_file:
      - .env
      - ./minio/.env.minio
    # expose:
    #   - "9000"
    #   - "9001"
    # ports:
    # - 9000:9000
    # - 9001:9001
    environment:
      MINIO_BROWSER_REDIRECT_URL: http://localhost/minio/console
      # MINIO_ROOT_USER: minioadmin
      # MINIO_ROOT_PASSWORD: minioadmin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./minio/data:/data
    # secrets:
    #   - source: minio-ca
    #     target: /root/.minio/certs/CAs/myCA.crt
    #     # uid: "1001" # long syntax only works in swarm mode, added for documentation
    #     # gid: "1001"
    #   - source: minio-certs
    #     target: /root/.minio/certs/public.crt
    #     # uid: "1001"
    #     # gid: "1001"
    #   - source: minio-key
    #     target: /root/.minio/certs/private.key
    #     # uid: "1001"
    #     # gid: "1001"
    networks:
      isatis:
        ipv4_address: "172.20.0.30"

  client:
    container_name: client
    build:
      context: .
      dockerfile: dev-env/client.dev.dockerfile
      args:
        NODE_ENV: development # Set environment to development
    env_file:
      - .env
    volumes:
      - .:/home/app
      - /home/app/client/node_modules
    ports:
      - "3000:3000" # Expose Client port for development
    networks:
      isatis:
        ipv4_address: "172.20.0.40"

  postgres:
    container_name: ${POSTGRES_HOST}
    image: postgres:16-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    tty: true
    volumes:
      - ./api/database/postgres-db/data:/var/lib/postgresql/data
      - ./api/database/postgres-db/sql:/docker-entrypoint-initdb.d
    networks:
      isatis:
        ipv4_address: "172.20.0.60"

  redis:
    container_name: ${REDIS_HOST}
    image: redis:7.4.0-alpine
    env_file:
      - .env
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - ./api/database/redis-database/:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      isatis:
        ipv4_address: "172.20.0.70"

networks:
  isatis:
    driver: bridge
    ipam:
      config:
        - subnet: "172.20.0.0/24" # Define the subnet including the desired IP address
